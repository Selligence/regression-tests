{
	"info": {
		"_postman_id": "d275d32b-31c3-4ffe-b20f-3a9a23c92937",
		"name": "Automation Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17600629"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"access_token\", responseData.access_token);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is not null\", function () {\r",
									"    pm.expect(responseData).is.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"json Content Type\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "audience",
									"value": "https://auth.talentticker.ai",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{auth0_client_id}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{auth0_client_secret}}",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{auth0_username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{auth0_password}}",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{auth0_url}}",
							"host": [
								"{{auth0_url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GET",
			"item": [
				{
					"name": "GET Ticker",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is not null\", function () {\r",
									"    pm.expect(responseData).is.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"json Content Type\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"json properties are present\", function () {\r",
									"    pm.expect(responseData.data).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"Success message\", function () {\r",
									"    pm.expect(responseData.message).to.eql(\"OK\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/v2-events/ticker",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2-events",
								"ticker"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{access_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Sequence",
			"item": [
				{
					"name": "404",
					"item": [
						{
							"name": "GET Get Sequence 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is not null\", function () {\r",
											"    pm.expect(responseData).is.not.equal(null);\r",
											"});\r",
											"\r",
											"pm.test(\"json Content Type\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Contains correct message\", function () {\r",
											"    pm.expect(responseData.message).to.eql(\"Not Found\");\r",
											"})\r",
											"\r",
											"pm.test(\"Contains correct error\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Sequence notasequenceid not found for user\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/v1-sequencing/sequence/notasequenceid",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1-sequencing",
										"sequence",
										"notasequenceid"
									]
								}
							},
							"response": []
						},
						{
							"name": "PATCH Update Sequence 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is not null\", function () {\r",
											"    pm.expect(responseData).is.not.equal(null);\r",
											"});\r",
											"\r",
											"pm.test(\"json Content Type\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Contains correct message\", function () {\r",
											"    pm.expect(responseData.message).to.eql(\"Not Found\");\r",
											"})\r",
											"\r",
											"pm.test(\"Contains correct error\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Sequence notasequenceid not found for user\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"sequence\": {\n        \"name\": \"New Amended Postman Test Sequence\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1-sequencing/sequence/notasequenceid",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1-sequencing",
										"sequence",
										"notasequenceid"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE Delete Sequence 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is not null\", function () {\r",
											"    pm.expect(responseData).is.not.equal(null);\r",
											"});\r",
											"\r",
											"pm.test(\"json Content Type\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Contains correct message\", function () {\r",
											"    pm.expect(responseData.message).to.eql(\"Not Found\");\r",
											"})\r",
											"\r",
											"pm.test(\"Contains correct error\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Sequence notasequenceid not found for user\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"schedule\": {}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1-sequencing/sequence/notasequenceid",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1-sequencing",
										"sequence",
										"notasequenceid"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "POST Create Sequence",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"sequence_id\", responseData.data.id);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is not null\", function () {\r",
									"    pm.expect(responseData).is.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"json Content Type\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Success on sequence create\", function () {\r",
									"    pm.expect(responseData.data.message).to.eql(\"Successfully created sequence\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"sequence\": {\n        \"name\": \"{{sequence_name}}\",\n        \"steps\": [{\n            \"id\": \"kjlkjlkjlkjlkjlkjl\",\n            \"days_after\": 1,\n            \"step_number\": 1,\n            \"step_type\": \"email\",\n            \"is_active\": true\n        }]\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v1-sequencing/sequence",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1-sequencing",
								"sequence"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Get Sequence",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is not null\", function () {\r",
									"    pm.expect(responseData).is.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"json Content Type\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Contains correct sequence name\", function () {\r",
									"    pm.expect(responseData.data.sequence.name).to.eql(pm.environment.get(\"sequence_name\"));\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/v1-sequencing/sequence/{{sequence_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1-sequencing",
								"sequence",
								"{{sequence_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Get Sequences",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is not null\", function () {",
									"    pm.expect(responseData).is.not.equal(null);",
									"});",
									"",
									"pm.test(\"json Content Type\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Contains correct sequence name\", function () {",
									"    pm.expect(responseData.data.sequences[0].name).to.eql(pm.environment.get(\"sequence_name\"));",
									"})",
									"",
									"pm.test(\"json properties are present\", function () {",
									"    pm.expect(responseData.data.sequences).to.be.an(\"array\");",
									"});",
									"",
									"pm.test(\"Success message\", function () {",
									"    pm.expect(responseData.message).to.eql(\"OK\");",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/v1-sequencing/sequences",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1-sequencing",
								"sequences"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH Update Sequence",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is not null\", function () {\r",
									"    pm.expect(responseData).is.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"json Content Type\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Success on sequence update\", function () {\r",
									"    pm.expect(responseData.data.message).to.eql(\"Successfully updated sequence\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"sequence\": {\n        \"name\": \"New Amended Postman Test Sequence\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v1-sequencing/sequence/{{sequence_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1-sequencing",
								"sequence",
								"{{sequence_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Get Sequence",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is not null\", function () {\r",
									"    pm.expect(responseData).is.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"json Content Type\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Contains correct sequence name\", function () {\r",
									"    pm.expect(responseData.data.sequence.name).to.eql(\"New Amended Postman Test Sequence\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/v1-sequencing/sequence/{{sequence_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1-sequencing",
								"sequence",
								"{{sequence_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Delete Sequence",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is not null\", function () {\r",
									"    pm.expect(responseData).is.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"json Content Type\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Success on sequence delete\", function () {\r",
									"    pm.expect(responseData.data).to.eql(\"Successfully deleted sequence\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"schedule\": {}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v1-sequencing/sequence/{{sequence_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1-sequencing",
								"sequence",
								"{{sequence_id}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{access_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Schedule",
			"item": [
				{
					"name": "404",
					"item": [
						{
							"name": "GET Get Schedule 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is not null\", function () {\r",
											"    pm.expect(responseData).is.not.equal(null);\r",
											"});\r",
											"\r",
											"pm.test(\"json Content Type\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Contains correct message\", function () {\r",
											"    pm.expect(responseData.message).to.eql(\"Not Found\");\r",
											"})\r",
											"\r",
											"pm.test(\"Contains correct error\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Could not find schedule\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/v1-sequencing/schedule/notascheduleid",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1-sequencing",
										"schedule",
										"notascheduleid"
									]
								}
							},
							"response": []
						},
						{
							"name": "PATCH Update Schedule 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is not null\", function () {\r",
											"    pm.expect(responseData).is.not.equal(null);\r",
											"});\r",
											"\r",
											"pm.test(\"json Content Type\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Contains correct message\", function () {\r",
											"    pm.expect(responseData.message).to.eql(\"Not Found\");\r",
											"})\r",
											"\r",
											"pm.test(\"Contains correct error\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Could not find schedule\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"schedule\": {\n        \"name\": \"example changed name schedule\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1-sequencing/schedule/notascheduleid",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1-sequencing",
										"schedule",
										"notascheduleid"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE Delete Schedule 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is not null\", function () {\r",
											"    pm.expect(responseData).is.not.equal(null);\r",
											"});\r",
											"\r",
											"pm.test(\"json Content Type\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Contains correct message\", function () {\r",
											"    pm.expect(responseData.message).to.eql(\"Not Found\");\r",
											"})\r",
											"\r",
											"pm.test(\"Contains correct error\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Could not find schedule\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/v1-sequencing/schedule/notascheduleid",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1-sequencing",
										"schedule",
										"notascheduleid"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "POST Create Schedule",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"schedule_id\", responseData.data.id);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is not null\", function () {\r",
									"    pm.expect(responseData).is.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"json Content Type\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Success on schedule create\", function () {\r",
									"    pm.expect(responseData.data.message).to.eql(\"Successfully created schedule\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"schedule\": {\r\n        \"name\": \"{{schedule_name}}\",\r\n        \"is_default\": true,\r\n        \"default_timezone\": \"Europe/London\",\r\n        \"use_prospect_timezone\": true,\r\n        \"schedule\": [{\r\n            \"day\": 1,\r\n            \"start_minute\": 100,\r\n            \"end_minute\": 200\r\n        }],\r\n        \"exclude_local_holidays\": true\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v1-sequencing/schedule",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1-sequencing",
								"schedule"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Get Schedule",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is not null\", function () {\r",
									"    pm.expect(responseData).is.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"json Content Type\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Contains correct schedule name\", function () {\r",
									"    pm.expect(responseData.data.schedule.name).to.eql(pm.environment.get(\"schedule_name\"));\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/v1-sequencing/schedule/{{schedule_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1-sequencing",
								"schedule",
								"{{schedule_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Get Schedules",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is not null\", function () {\r",
									"    pm.expect(responseData).is.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"json Content Type\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Contains correct schedule name\", function () {\r",
									"    pm.expect(responseData.data.schedules[0].name).to.eql(pm.environment.get(\"schedule_name\"));\r",
									"})\r",
									"\r",
									"pm.test(\"json properties are present\", function () {\r",
									"    pm.expect(responseData.data.schedules).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"Success message\", function () {\r",
									"    pm.expect(responseData.message).to.eql(\"OK\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/v1-sequencing/schedules",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1-sequencing",
								"schedules"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH Update Schedule",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is not null\", function () {\r",
									"    pm.expect(responseData).is.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"json Content Type\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Success on schedule update\", function () {\r",
									"    pm.expect(responseData.data.message).to.eql(\"Successfully updated schedule\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"schedule\": {\n        \"name\": \"example changed name schedule\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v1-sequencing/schedule/{{schedule_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1-sequencing",
								"schedule",
								"{{schedule_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Get Schedule after PATCH",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is not null\", function () {\r",
									"    pm.expect(responseData).is.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"json Content Type\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Contains correct schedule name\", function () {\r",
									"    pm.expect(responseData.data.schedule.name).to.eql(\"example changed name schedule\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/v1-sequencing/schedule/{{schedule_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1-sequencing",
								"schedule",
								"{{schedule_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Delete Schedule",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is not null\", function () {\r",
									"    pm.expect(responseData).is.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"json Content Type\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Success on schedule delete\", function () {\r",
									"    pm.expect(responseData.data).to.eql(\"Successfully deleted schedule\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/v1-sequencing/schedule/{{schedule_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1-sequencing",
								"schedule",
								"{{schedule_id}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{access_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Sourcing",
			"item": [
				{
					"name": "POST Sourcing Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"schedule_id\", responseData.data.id);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is not null\", function () {\r",
									"    pm.expect(responseData).is.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"json Content Type\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Count total correct\", function () {\r",
									"    pm.expect(responseData.data.results.count).to.eql(1);\r",
									"})\r",
									"\r",
									"pm.test(\"Total correct\", function () {\r",
									"    pm.expect(responseData.data.results.total).to.eql(1);\r",
									"})\r",
									"\r",
									"pm.test(\"Total correct\", function () {\r",
									"    pm.expect(responseData.data.results.documents[0].first_name).to.eql(\"John\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"applicability\": [\r\n        \"current\",\r\n        \"previous\"\r\n    ],\r\n    \"exclusion\": [],\r\n    \"input\": [\r\n        {\r\n            \"es_id\": \"78f42304-75f5-4678-8155-4d041d037ade\",\r\n            \"name\": \"Test Account Manager\",\r\n            \"type\": \"freetext\",\r\n            \"id\": \"c4d2a9bb-dbc1-46e7-871b-7e816ac5389f\",\r\n            \"boolean_operator\": \"or\"\r\n        },\r\n        {\r\n            \"domain\": \"selligence.com\",\r\n            \"name\": \"Selligence\",\r\n            \"es_id\": \"com2255739\",\r\n            \"founded_on_date\": \"None\",\r\n            \"id\": 2255739,\r\n            \"type\": \"company\",\r\n            \"area_of_operations\": \"International\",\r\n            \"score\": 13090,\r\n            \"boolean_operator\": \"or\"\r\n        }\r\n    ],\r\n    \"company_sizes\": [],\r\n    \"seniorities\": [],\r\n    \"distance_in_miles\": 1,\r\n    \"query_duplicate_names\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v4-powersearch/people-search?limit=13&skip=0",
							"host": [
								"{{url}}"
							],
							"path": [
								"v4-powersearch",
								"people-search"
							],
							"query": [
								{
									"key": "limit",
									"value": "13"
								},
								{
									"key": "skip",
									"value": "0"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}